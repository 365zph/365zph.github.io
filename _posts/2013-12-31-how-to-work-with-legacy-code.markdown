---
author: viviworld
comments: true
date: 2013-12-31 13:17:41+00:00
layout: post
link: http://www.labazhou.net/2013/12/how-to-work-with-legacy-code/
slug: how-to-work-with-legacy-code
title: 怎样处理遗留代码
wordpress_id: 113
categories:
- 编程
tags:
- bug
- 代码
- 遗留代码
---

### 介绍


想象一下，你未来的工作是处理一堆遗留代码【注1】，它几经易手。你会发现好的或糟糕的代码、不同的代码风格、或多或少没有被单元测试覆盖到。到处都能嗅到代码的味道，或许还有严重影响效率、灵活性、易测试等等严重问题。然后，你心里可能产生了大量的优化代码的想法！好吧……**不要碰它们**！


### 为什么要保留现状？


请考虑以下因素：



	
  * 它能运行。无论好坏，它运行好好的。虽说它可以运行地更好，但是你的时间有限，还有要实现的新功能，当然也有要修复的bug，更缺乏单元测试。或许，至少有一个通过测试了、并且是最重要的---时间的测试。除了这些以及效率因素，你可以辩解道：经过你的重构，代码会更加灵活、易于接手、新功能也会高效接入。的确如此。然而，你需要慎重。

	
  * 你会引入新bug。修复遗留代码有点儿类似俄罗斯轮盘赌博，迟早你会引入影响到业务演示进度的新bug，也就没有人去在乎巨大的、却看不见的代码改进。你不能确定任何事情，这里有些例子。比如你看不到某些代码的说明，我们试着移除掉，然后检查一下，程序仍然能够运行。直到某一天你发现，环境之外的某些xml文件要用到那些很少用到却比较重要的场合才用到的代码，只是当时返回了空的、甚至更严重的异常，而该异常被一段空的catch块捕获了，导致你认为这些代码可以移除。你或许认为重新抛出而不是吞掉这些异常是个好主意？是的，不过你得到了很多来自程序深处的不太重要的异常，用户也得到了，是的，是你搞坏了程序，在你改代码之前程序是没有异常的。好吧，你至少加上一些异常捕捉方法。不，你没有时间，即使你有时间。

	
  * 你做的小修改会引起雪崩式的其他变化。如果代码庞大而你是新手，你会发现有更多的依赖需要考虑。现在，你开始觉得向经理要的时间比你实际花费的时间要少很多（因为你不想让经理难堪），他给你的时间比你想要的以及解决问题真正需要的时间要少，你陷入困境了。




### 怎么办？


这是一个开放式的问题，取决于你面对的实际代码情况。我给出对我管用的方法：



	
  * 不要改动现有代码。当做黑盒并遵循开-闭原则【注2】。条件允许时，要试着扩展现有代码，而不要修改代码。

	
  * 在已有代码顶部增加新代码，试着减少新代码所在空间。当错误出现时，很容易去掉新代码，再检查问题的起因。

	
  * 保持新旧代码独立。顺其自然地，用新方法、新单一责任类、适配器取代旧代码里的新循环或控制流逻辑。这就很容易区分出哪些是可以被重构、被修改或优化的新代码，哪些是应该保持现状的旧代码。


按照这些方法，你就会完成基于遗留代码的核心程序，它们经过了时间的检验，当然还有新的、灵活的、易辨认的、测试过的构建在旧代码之上的新代码。不同的“变色龙”方法表现为程序员把新、旧代码混合在一处以致于分不清楚。坏处是强迫程序员进一步扩大了不可能测试的揉在一起的功能。时间被重置，结果无法保证，代码进一步僵硬得难以辨认。这带来了过多的控制流语句，给将来的改进工作不会带来有用的价值。

“重构“带来了新的bug，它可以使代码更好，也存在导致代码变得散乱、bug丛生的风险，以及被这种重构终结的可预期时间表每一天都在流失。

原文地址：[http://www.codeproject.com/Tips/702688/How-to-work-with-legacy-code](http://www.codeproject.com/Tips/702688/How-to-work-with-legacy-code)
注1：遗留代码：[http://book.douban.com/subject/1428943/](http://book.douban.com/subject/1428943/)
注2：[http://blog.csdn.net/moon1128/article/details/243968](http://blog.csdn.net/moon1128/article/details/243968)
