---
author: viviworld
comments: true
date: 2015-09-27 07:53:26+00:00
excerpt: 把应聘者带进来，讨论解决方案。让应聘者讨论他们的设计方案，把他们当成你的团队成员来挑战他们，让他们说出思考过程。
layout: post
link: http://www.labazhou.net/2015/09/the-one-method-to-eliminate-bad-tech-hires/
slug: the-one-method-to-eliminate-bad-tech-hires
title: 消除糟糕的技术招聘的一种方法
wordpress_id: 2561
categories:
- 职业
tags:
- IMDB
- TDD
- 招聘
---


	
  * 原文地址（original source）：[https://medium.com/swlh/the-one-method-to-eliminate-bad-tech-hires-630d539b2e1d](https://medium.com/swlh/the-one-method-to-eliminate-bad-tech-hires-630d539b2e1d)

	
  * 作者（author）：[https://twitter.com/ayasin](https://twitter.com/ayasin)





* * *





[![消除糟糕的技术招聘的一种方法](http://www.labazhou.net/wp-content/uploads/2015/09/the-one-method-to-eliminate-bad-tech-hires-600x399.jpg)](http://www.labazhou.net/wp-content/uploads/2015/09/the-one-method-to-eliminate-bad-tech-hires.jpg)

让我们捞干的吧。对于雇佣技术应聘者而言，面试是一种很糟糕的方式。你不但无法评估应聘者的真实情况，而且会有「劣币驱逐良币」的现象发生。

[Eric Elliott 写了一篇非常不错的文章](https://medium.com/javascript-scene/why-hiring-is-so-hard-in-tech-c462c3230017)，他谈到了面试工程师，哪些面试技巧可用，哪些不可用。

我发现，最可用的技巧里，如果结合起来其中的两种思路，就会产生最好的效果。



	
  * [为安排的测验项目付费](http://www.labazhou.net/2014/09/dont-fool-yourself-testing-job-applicants-on-your-own-product-is-unethical-and-ineffective/)（要慎重的是，做到公平地付费------比如说，对于评估的完成时间，每小时支付 100 美元------如果这个问题需要两个小时才能完成，那就支付 200 美元）

	
  * 把应聘者带进来，讨论解决方案。让应聘者讨论他们的设计方案，把他们当成你的团队成员来挑战他们，让他们说出思考过程。


为测验项目向应聘者支付费用，并和我们团队讨论该项目，几乎能够更好地消除任何糟糕的招聘决定。即使应聘者给出了糟糕的解决方案（甚至没有技术方案），为其支付的费用，要比你雇佣了错误的人，便宜得多。因为后者要执行长达 3 个月的绩效提升计划，试着让他们成为合适的人，并最终开掉他们。

我们已经经历了两个阶段，「这个应聘者就是我想要的人」和「和这个应聘者长期合作，我感到严重怀疑」，使用这个技巧，我们就可以让应聘者改变我们的错误视角。一个人很容易就能润色（或夸大其词）他们的简历，编程的一些琐事也能被记住，但是，让某人伪装具备了真正的技能，是难以做到的。


### 为什么向应聘者支付费用来解决问题的方式，就能奏效




#### 对于雇主





	
  * 既然应聘者被支付费用了，应聘者会将其视作一次正当的咨询会谈，因此在解决该问题时，会使出浑身解数。

	
  * 对于应聘者而言，如果他们决定加入公司，那么，这次面试受到了什么对待，他们不久也会被这样对待。

	
  * 以一种低风险的成本，就可以和应聘者进行一次模拟工作的互动。项目完成之后，你把应聘者带进来，向他们询问一些实际的设计/编码决定方面的问题。这让你认识到，他们是怎样沟通、接受批评和质疑的，他们是否能为其选择的背后提供充足的理由。




#### 对于应聘者





	
  * 应聘者可以真实地了解，你是怎样和团队成员互动的。

	
  * 让他们展示简历中提到的某些技能，并且不是一眼就能从简历上看出来的技能。

	
  * 对于什么是重要的，这种面试方法可以让他们以一种非评判的方式，给出他们真正的观点。比如，这个人为每一行代码都写测试了吗？没有？或许测试对他们而言，真的不重要，或许这是完全有效的。如果你只是问他们，你做 TDD 吗？你是得不到他们观点的。每个人都会说，测试很重要……他们也是这样做的。大部分人不同意的地方在于，测试有多么重要，而这种方法就能看出来。




### 当采用这种面试方法时，注意 6 个规则




#### 规则 #1 ：让他们在周末做


这是我和 Eric 稍微不同的地方。为了辨别出某个人怎样才能更好地提出一种合适的解决方案，2 个小时，就显得尤为不足了。

我喜欢的方式，是邀请他们在周五来办公室解决手头问题，以及怎样让他们解决问题。然后，我将任务安排给他们，约好周一再看他们的解决方案。

我将提出解决方案要用里的一些技术，对于其它工具或技术，他们可斟酌使用。比如，我会说，请使用 JS 里的函数响应式编程(Functional Reactive Programming:FRP)来解决这个问题，但是使用 Kefir、ulacon 或 RX 种的一种，则取决于应聘者。


#### 规则 #2 ：如果要修复某个问题的部落知识（Tribal knowledge[note]
部落知识是指，在部落内部广为人知、但部落外部的人常常不了解。一个部落可以是分享共同知识的某个小组、人们的小组织。从公司角度看，「部落知识、或 Know-How 是组织的协作智慧。它是所有这些人的知识和能力的总和。 [https://en.wikipedia.org/wiki/Tribal_knowledge](https://en.wikipedia.org/wiki/Tribal_knowledge)[/note]）


规则 #2 和规则 #1 有联系，但是如果你不雇佣一名客服代表，就把电脑交给某人，说 OK，修复这个问题吧。这几乎是不可能完成的任务。为了修复我们私有系统的问题，每个人使用到工具，通常要得到合适的培训。

给出的问题需要有着高度的独立性。


### 规则 #3：你正期望的解决方案要清晰，并且便于改善


比如，如果我正在面试一名 web 开发者，我将给他一个有着清晰场景的测验：


<blockquote>创建一个单页（single page）应用，支持录入我的家庭电影收藏里的电影，用线下存储来保存、可搜索。可以根据类型、电影名称和演员搜索。</blockquote>


实际上，我没有告诉他们进一步的方向，比如使用网页存储[note]网页存储和DOM存储（文档对象模型）是网络应用程序用于在网络浏览器存储数据的方法和通讯协议。网络存储支持持久性数据存储，类似于 Cookie，以及 window-local 存储。[https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E5%AD%98%E5%82%A8](https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E5%AD%98%E5%82%A8) [/note]或 cookies，支持多个平台的响应式设计，使用 CSS。我把这些东东留给他们来决定。一些人选择按要求做，另一些人做得更多。

总之，我们喜欢最终结果，这是关键的。

我不是说「我喜欢电影，为我创建一个好看的电影网站」、或「如果你不得不从头创建一个 [IMDB](http://www.imdb.com/)，那么你该如何做架构」。我想让任务足以简单，让工程师提供一种解决方案，足够有挑战，便于使用他们的技能来创造出不一样的东西。


#### 规则 #4：让他们在周一给小组演示解决方案


我在技术招聘中见到的最大问题在于，他们对于解决方案处于防守态势。我故意对他们的解决方案提出疑问，以观察他们的反应。

如果他们变得防御，面试就可以立即终止了。记住，争论哪个是好的、和处于防御态势之间，存在着差异，前者是基于合理的事实，后者是基于感情。

这条规则的关键地方在于，小组里的每个成员必须做好准备，并审视整个解决方案。


#### 规则 #5：为他们写下问题，方便带回家


要搞清楚，你正在寻找什么样的技术和工具，还有用以评判的标准。同时，让最终解决方案保持开放，足以让应聘者体现他们自己的才华。在周五时，让他们问你任何问题，并确保周末可以通过电子邮件收到他们的问题。目标是为了创建一种成功的环境（希望你把应聘者当成某个员工来对待）。


#### 规则 #6：周一要立即付给他们钱


不管是否雇佣他们，在他们演示解决方案后，就给他们一张支票，将来无论是开始、还是结束这种关系，都是最好的方式。

另一种不错的方式是使用 [June](http://joinjune.com/) [声明：我是其联合创始人]，以此提高面试和支付的便利性。


### 是否雇佣，算是个问题




#### 你应该雇佣某个人的一些征兆：





	
  * 在周五的会面中，他们询问了很多，以澄清问题。

	
  * 疑问被想通了，不给误解留下死角。

	
  * 解决方案用你要求的技术或技巧，解决了你的问题。

	
  * 他们阅读了整个问题，并正确地遵循了规范（例如，如果要求使用 PostgreSQL，那么，他们不会只给出适用于 Oracle DB 的查询）。




#### 你不应该雇佣某个人的征兆：





	
  * 他们拒绝做测验项目，因为「有人不让我做就愿意雇佣我」。

	
  * 不能正确地完成该项目。

	
  * 他们无法清楚地表达他们的设计/编码决定，以及这样做的原因。

	
  * 他们在演示解决方案时，处于防御态势。




### 总结


你们的经历各有所长，但是我发现这种技巧，对于雇佣有才能的技术人才，屡试不爽。然而，我的测验项目不够庞大，这有可能导致糟糕的应聘。


### 关于我


我叫 Amir Yasin，June 的 CTO 和联合创始人。和世界上最优秀的 IT 招聘人员有偿交谈。

我精通数种语言，对高性能、可扩展性、软件架构和总体攻坚工作有着浓厚兴趣。你可以[在 Medium 上关注我](https://medium.com/@ayasin)，我写了一些关于软件工程的博客；还可以[在 Twitter 上关注我](https://twitter.com/ayasin)，我偶尔说一些有意思的话；或者查看[我在 GitHub 上为 FOSS 社区的所做的贡献](https://github.com/ayasin)。

如果你喜欢文本，请推荐给别人，对此我深表感激（点击下面的心形图标即可）。
